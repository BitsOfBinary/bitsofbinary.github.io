---
layout: post
title: "100 Days of YARA - Day 59"
date: 2023-02-28 00:00:00 -0000
categories: yara
---

# File classification: PE files
If you write a lot of YARA rules for Windows malware, you will get very used to writing this condition.

As can be [seen in the docs](https://yara.readthedocs.io/en/stable/writingrules.html#accessing-data-at-a-given-position), the following rule can be used to identify portable executable (PE) files, which is the executable file format for Windows:
```
rule IsPE
{
    condition:
        // MZ signature at offset 0 and ...
        uint16(0) == 0x5A4D and
        // ... PE signature at offset stored in MZ header at 0x3C
        uint32(uint32(0x3C)) == 0x00004550
}
```

This rule is very useful in how descriptive it is. The comments explain the reasoning behind the checks.

The first check is looking for the bytes `MZ`, which is the start of the [DOS stub](https://learn.microsoft.com/en-us/windows/win32/debug/pe-format#ms-dos-stub-image-only) (an artefact of MS-DOS). If you read the PE documentation that I've linked to, you'll see that it specifies that at offset `0x3c` is a pointer to where the PE header begins, which should start with the bytes `PE\x00\x00`. As such, this is why the second check uses two `uint32` calls; one to get the pointer, and the other to get the data pointed to.

If you look closely at the rule, you'll realise that both the `MZ` and `PE` strings are reversed. This is because, as highlighted in the previous post, the default for these functions is little endian. So you could equivalently write the rule as:
```
rule IsPE
{
    condition:
        // MZ signature at offset 0 and ...
        uint16be(0) == 0x4D5A and
        // ... PE signature at offset stored in MZ header at 0x3C
        uint32be(uint32(0x3C)) == 0x50450000
}
```
**Note**: I can't change the inner `uint32` comparison as that pointer will be little endian; but I can change the comparisons.

Why would you choose one over the other? It's really a matter of preference. The only technical limitation is that the big endian versions were only added in [YARA v3.2.0](https://github.com/VirusTotal/yara/releases/tag/v3.2.0), which was released in November 2014. Ideally, you should be using the latest version, but I believe some tools out there still rely on older versions of YARA.