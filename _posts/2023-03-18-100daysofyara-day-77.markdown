---
layout: post
title: "100 Days of YARA - Day 77"
date: 2023-03-18 00:00:00 -0000
categories: yara
---

# Aside - Facets to Signature
When we write YARA rules, there are several different categories/facets that we can focus on. In roughly increasing order of complexity, I think these can fall into the following categories:
- Strings - plaintext (or encoded) strings seen within a sample
- Meta features - metadata associated with the file itself (such as headers or artefacts left in compiled samples)
- Code - signaturing the code of the sample itself (whether compiled, or the plaintext code that will be interpreted later on)
- Techniques - abstracting away from any of the previous facets to focus on having a signature for a technique being used

It may not always be possible to write rules for a sample covering all of these features; a packed sample may not have any plaintext strings to work with, or a webshell may not have enough unique code to make a reliable rule. However, if you can cover a variety of these categories, you're already building in redundancy into your rules to cover a malware family, especially if you can cover a technique well.

The tools you use to analyse these facets can vary a lot depending on the sample! Sometimes you can get away with just a text editor if you're looking at scripting languages like PowerShell, VBScript, or JavaScript. But for compiled languages, you may have to use more specific tooling.

While there are many commercial options available, you can use a mixture of the following free tools to do the analysis needed for writing rules:
- [strings2](https://github.com/glmcdona/strings2) - extracts plaintext ASCII and unicode strings (alternatives like [FLOSS](https://github.com/mandiant/flare-floss) are great for dumping out encoded strings, but I like to see what I have to work with in plaintext first)
- [Detect It Easy](https://github.com/horsicq/Detect-It-Easy) - determines file types, and shows meta features of them
- [Ghidra](https://github.com/NationalSecurityAgency/ghidra) - a reverse engineering framework for a variety of processor types
- [HxD](https://mh-nexus.de/en/hxd/) - a great, free hex editor for copying/editing the hex representations of files