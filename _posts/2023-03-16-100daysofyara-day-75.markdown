---
layout: post
title: "100 Days of YARA - Day 75"
date: 2023-03-16 00:00:00 -0000
categories: yara
---

# File classification: OneNote Case Study - Embedded Files - Part 4
Let's do a critique the rule from the previous post. Reviewing your own rules is always a good opportunity to learn how to improve.

### Redundant string check?
The `$embedded_file_container and` line in the rule is actually redundant, as the line `for any i in (1 .. #embedded_file_container) : (` won't evaluate if there are no occurances of `$embedded_file_container`! So we could cut that line.

### Unnecessary embedded filename check?
Is the `$embedded_file_name in ...` check really needed? On one hand, we may want to check if there is actually a filename to check at all; but on the other, it could be worthwhile just doing the file extensions check anyway. I think we could safely cut this line and the rule would function the same.

### Is the range check for file extensions good enough?
The `any of ($ext*) in ...` line checks the first `0x100` bytes after an occurance of `$embedded_file_container`. Given that we're doing some pretty rough parsing of a OneNote file, is this good enough? Or should we build in more slack? If so, what range should we check instead?

### Is the for loop necessary at all?
Arguably, do we even need the for loop? Could we not just check for OneNote files that have those file extensions in them via strings section? I think there is a good case to be made for doing either; the rule in its current format I think is less FP-prone (i.e. it is less likely to hit on samples that have text containing those file extensions), but if my condition isn't loose enough then perhaps I'm missing malicious samples?

### Too many file modifiers?
Each string has `ascii wide nocase` applied to it. This will create quite a lot of atoms to check for, as each casing variation of both the `ascii` and `wide` string variants will need to be computed. However, given that these strings are relatively short, I think that the performance could be a lot worse, and I'd personally be happy including this in my ruleset.

## Alternative rule
Based on the above, a variation of the rule from the previous post could look like this:
```
rule Heuristic_OneNote_Notebook_with_Embedded_Executable_File {
    meta:
        description = "Detects OneNote notebooks with suspicious embedded executable files"
        reference = "https://interoperability.blob.core.windows.net/files/MS-ONE/%5bMS-ONE%5d.pdf"

    strings:
        $embedded_file_container = {9B 1D 00 20}
        
        $ext1 = ".ade" ascii wide nocase
        $ext2 = ".adp" ascii wide nocase
        $ext3 = ".ai" ascii wide nocase
        $ext4 = ".bat" ascii wide nocase
        $ext5 = ".chm" ascii wide nocase
        $ext6 = ".cmd" ascii wide nocase
        $ext7 = ".com" ascii wide nocase
        $ext8 = ".cpl" ascii wide nocase
        $ext9 = ".dll" ascii wide nocase
        $ext10 = ".exe" ascii wide nocase
        $ext11 = ".hlp" ascii wide nocase
        $ext12 = ".hta" ascii wide nocase
        $ext13 = ".inf" ascii wide nocase
        $ext14 = ".ins" ascii wide nocase
        $ext15 = ".isp" ascii wide nocase
        $ext16 = ".jar" ascii wide nocase
        $ext17 = ".js" ascii wide nocase
        $ext18 = ".jse" ascii wide nocase
        $ext19 = ".lib" ascii wide nocase
        $ext20 = ".lnk" ascii wide nocase
        $ext21 = ".mde" ascii wide nocase
        $ext22 = ".msc" ascii wide nocase
        $ext23 = ".msi" ascii wide nocase
        $ext24 = ".msp" ascii wide nocase
        $ext25 = ".mst" ascii wide nocase
        $ext26 = ".nsh" ascii wide nocase
        $ext27 = ".pif" ascii wide nocase
        $ext28 = ".ps" ascii wide nocase
        $ext29 = ".ps1" ascii wide nocase
        $ext30 = ".reg" ascii wide nocase
        $ext31 = ".scr" ascii wide nocase
        $ext32 = ".sct" ascii wide nocase
        $ext33 = ".shb" ascii wide nocase
        $ext34 = ".shs" ascii wide nocase
        $ext35 = ".sys" ascii wide nocase
        $ext36 = ".vb" ascii wide nocase
        $ext37 = ".vbe" ascii wide nocase
        $ext38 = ".vbs" ascii wide nocase
        $ext39 = ".vxd" ascii wide nocase
        $ext40 = ".wsc" ascii wide nocase
        $ext41 = ".wsf" ascii wide nocase
        $ext42 = ".wsh" ascii wide nocase

    condition:
        uint32be(0) == 0xE4525C7B and 
        for any i in (1 .. #embedded_file_container) : (
            any of ($ext*) in (@embedded_file_container[i] .. @embedded_file_container[i] + 0x200)
        )
}
```

I.e. we lose the `$embedded_file_name` checks, and increase the range check; but we still keep the for loop looking over `$embedded_file_container` instances.

Hopefully this self critique shows that while there are usually "objective" ways of improving rules, there are also many "subjective" opinions that can be applied! How would you change this rule, for example?