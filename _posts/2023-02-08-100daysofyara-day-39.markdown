---
layout: post
title: "100 Days of YARA - Day 39"
date: 2023-02-08 00:00:00 -0000
categories: yara
---

# Math Module - Entropy
The function that I've seen used (and which I've used) the most from the math module, is `math.entropy()`. This returns the entropy of the input, which is described as "[information density of the contents of the file](https://fourmilab.ch/random/)". The higher number returned out (which goes up to a maximum of 8), this means the more dense it is with information, i.e. it is closer to being "random".

As such, a high entropy can indicate "random" data, which in some scenarios could indicate that the data itself is encrypted (i.e. good encryption algorithms will make the ciphertext look as random as possible).

Threat actors use encryption to obfuscate sections of malware (e.g. strings, configuration, next stages, etc.), meaning we can use entropy to try and find these. How you decide which parts of a file to scan for encrypted data is up to you. A rule that I've written before looking for possible samples possibly abusing [MS13-098](https://learn.microsoft.com/en-us/security-updates/securitybulletins/2013/ms13-098) can be found here: [https://github.com/PwCUK-CTO/TheSAS2021-Red-Kelpie/blob/main/yara/ms13_098.yar](https://github.com/PwCUK-CTO/TheSAS2021-Red-Kelpie/blob/main/yara/ms13_098.yar)

In this case, I'm looking for extra data at the end of a Microsoft digital signature, and checking to see if the entropy is high; that is, there is potentially an encrypted payload at the end of it. 

Looking for anomalies like this (i.e. high entropy in unexpected places) can lead to some good heuristic rules!