---
layout: post
title: "100 Days of YARA - Day 78"
date: 2023-03-19 00:00:00 -0000
categories: yara
---

# AcidBox - SSP DLL Strings - Format Strings Part 1
In Palo Alto Unit42's [blog on AcidBox](https://unit42.paloaltonetworks.com/acidbox-rare-malware/), it breaks down the malware framework into roughly three components:
- A main worker DLL
- Security Support Provider (SSP) DLLs to load the main worker
- A kernel mode payload embedded in the main worker

I will start by looking at the SSP DLLs; in particular looking at [003669761229d3e1db0f5a5b333ef62b3dffcc8e27c821ce9018362e0a2df7e9](https://samples.vx-underground.org/APTs/2020/2020.06.17/Samples/). As highlighted in the previous post, I'll start by looking at plaintext strings to see if there is anything obvious to base a YARA rule on.

At a first glance, there doesn't appear to much to work with! There are some representing the exported functions (we'll get to those later), some representing imported functions, and version information (which we'll also get to later).

However, near the start of the file (more specifically near the beginning of the `.text` section), there are some format strings of interest:
```
%s\%s
%s\%s{%s}
s\{%s}
```

All of these strings in combination may be good enough for a first rule as follows:
```
rule AcidBox_SSP_DLL_Loader_Format_Strings {
    meta:
        description = "Detects AcidBox SSP DLL loaders, based on a combination of format strings"
        author = "BitsOfBinary"
        reference = "https://unit42.paloaltonetworks.com/acidbox-rare-malware/"
        hash = "003669761229d3e1db0f5a5b333ef62b3dffcc8e27c821ce9018362e0a2df7e9"
        
    strings:
        $ = "%s\\%s"
        $ = "%s\\%s{%s}"
        $ = "s\\{%s}"
        
    condition:
        all of them
}
```