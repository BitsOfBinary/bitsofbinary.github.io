---
layout: post
title: "100 Days of YARA - Day 27"
date: 2023-01-27 00:00:00 -0000
categories: yara
---

# Malformed LNK Detection
A more experimental field I've added to the LNK module is `lnk.is_malformed`. This is a boolean field set if the LNK module fails to parse a file that otherwise has a valid LNK header.

Something that I learnt the hard way through writing the C code for the LNK module is about not trusting the data that is used as an input! If you assume a field is a particular size (either through a fixed length, or through parsing a field), then you can run into all kinds of vulnerabilities that could be exploited.

So the main purpose of this field is that if an LNK were designed to purposefully try to cause exceptions in a parser, this is something I'd want to catch; both from the perspective of making the code fail gracefully, but also from a potential detection standpoint! The dream would be that this variable is able to find an LNK exploiting some kind of vulnerability in a parser (I'm realistic in my expectations that this won't happen, but I can dream). 

The reality is that it'll almost certainly catch either broken LNKs, or just be a useful way of finding edge cases that the LNK module doesn't handle correctly.

Anyway, here's a rule using this variable:
```
import "lnk"

rule Heuristic_Malformed_LNK {
    meta:
        description = "Detects a malformed LNK"
        
    condition:
        lnk.is_malformed
}
```