---
layout: post
title: "100 Days of YARA - Day 88"
date: 2023-03-29 00:00:00 -0000
categories: yara
---

# AcidBox - SSP DLL Code - Signaturing Crypto Routine - Part 2
In the previous post's example, I copied the code straight from the binary itself to the YARA rule. While, if done correctly, this is usually sufficient to write rules with, there may be some edits we can make to the copied code to make it possible to try and find even more related samples.

In particular, we are able to add wildcard operators to hex strings using `?` characters, which we could use to mask bytes that may change between samples. This could be used for masking stack offsets that may change, changing the type of register used, or fully masking addresses that will likely change across variants.

While we could open the x86 manual and do this ourselves (which I still recommend trying at least once!), we can actually take advantage of a default Ghidra plugin to help us with this! That is, [YaraGhidraGUIScript.java](https://github.com/NationalSecurityAgency/ghidra/blob/master/Ghidra/Features/Base/ghidra_scripts/YaraGhidraGUIScript.java) can come in very handy. If I select a block of code, and execute this plugin, we can see the following output:
![](/assets/2023-03-29_ghidra_yara_output.png)

As you can see from the default output, some instructions have already been masked, changing some default registers. So already, we have a slightly looser rule we can use:
```
rule AcidBox_SSP_DLL_Loader_Crypto_Routine_B {
    meta:
        description = "Detects AcidBox SSP DLL loaders, based on a unique cryptography routine"
        author = "BitsOfBinary"
        reference = "https://unit42.paloaltonetworks.com/acidbox-rare-malware/"
        hash = "003669761229d3e1db0f5a5b333ef62b3dffcc8e27c821ce9018362e0a2df7e9"
        
    strings:
        // 180013a71 0f  b6  04  32   MOVZX      EAX ,byte ptr [param_2  + RSI *0x1 ]
        // 180013a75 33  c8           XOR        param_1 ,EAX
        // 180013a77 88  0c  3a       MOV        byte ptr [param_2  + RDI *0x1 ],param_1
        // 180013a7a 41  ff  c0       INC        param_3
        // 180013a7d 44  89  44       MOV        dword ptr [RSP  + local_14 ],param_3
        //           24  04
        $ = {0f b6 04 32 33 c8 88 0c 3a 4? ff c0 4? 89 44 ?4 04}
        
    condition:
        any of them
}
```

We'll discuss in the next post a bit more about this Ghidra script + masking code.