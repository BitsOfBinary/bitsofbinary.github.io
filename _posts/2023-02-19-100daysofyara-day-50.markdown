---
layout: post
title: "100 Days of YARA - Day 50"
date: 2023-02-19 00:00:00 -0000
categories: yara
---

# YARA Command line: Performance - Fast scan
The `-f` flag enables YARA to run in `fast scan` mode, but it isn't immediately clear what this means. However, there is some documentation on this feature (search for `SCAN_FLAGS_FAST_MODE` on the following page): [https://yara.readthedocs.io/en/stable/capi.html?highlight=fast#scanning-data-1](https://yara.readthedocs.io/en/stable/capi.html?highlight=fast#scanning-data-1)

As the docs point out:
> The SCAN_FLAGS_FAST_MODE flag makes the scanning a little faster by avoiding multiple matches of the same string when not necessary. Once the string was found in the file it's subsequently ignored, implying that you'll have a single match for the string, even if it appears multiple times in the scanned data. This flag has the same effect of the -f command-line option described in Running YARA from the command-line.

For strings that are common and appear multiple times in files, this flag will speed things up/[possibly prevent errors](https://twitter.com/plusvic/status/1248170739854958592). However, as the description mentions, this comes at a cost: `implying that you'll have a single match for the string, even if it appears multiple times in the scanned data`

As such, any rules that rely on the count of a string (i.e. the count of string `$test` can be obtained via `#test`), or iterating over offsets to string (i.e. the 5th occurance of `$test` would be `@test[5]` - yes, [they are indexed from 1](https://yara.readthedocs.io/en/stable/writingrules.html#string-offsets-or-virtual-addresses)) will not properly evaluate.

CORRECTION: Wesley Shields pointed out a threat to me that explains some of the nuance of fast mode better: [https://twitter.com/wxs/status/1627278414926184450](https://twitter.com/wxs/status/1627278414926184450)

In short, fast mode will still mean rules evaluate correctly no matter what condition you use; it's more about the fact that YARA won't need to store references to every string depending on the condition, which can save some processing at the expense of not displaying those strings to the user.

For example, the following rule:
```
rule test {
    strings:
        $foo = "foo"
        
    condition:
        any of them
}
```
when run on the following data: 
```
foobarfoo
```
will give the following output with `-s`:
```
0x0:$foo: foo
0x6:$foo: foo
```
and the following with `-f -s`:
```
0x0:$foo: foo
```

As you can see, it doesn't return the second instance of `foo`. But, if we update the rule to the following:
```
rule test {
    strings:
        $foo = "foo"
        
    condition:
        #foo == 2
}
```
it will still evaluate correctly whether in fast mode or not, and give the following strings as output:
```
0x0:$foo: foo
0x6:$foo: foo
```

I.e. you're still running in fast mode, but getting every string returned, as the condition still needs to rely on the count of them!

Thank you Wesley for pointing this out, I feel like I understand this mode a lot better now!