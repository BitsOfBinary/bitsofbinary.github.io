---
layout: post
title: "100 Days of YARA - Day 64"
date: 2023-03-05 00:00:00 -0000
categories: yara
---

# File classification: ELF files - Number of sections case study - Part 1
As a case study for ELF files, let's consider a slightly more complicated case. Again, we'll reference the specification: [https://en.wikipedia.org/wiki/Executable_and_Linkable_Format](https://en.wikipedia.org/wiki/Executable_and_Linkable_Format)

If I want to write a rule without using the ELF module to find ELF binaries with only one section (which could be an anomaly if combined with other heuristics), then I need to check a specific offset in the file. However, this offset changes depending on whether the binary is 32-bit or 64-bit; the offets at `0x30` and `0x3c` respectively.

Fortunately, the rule in our previous post guides us on how to check for 32/64-bit binaries. But we run into another problem in that YARA doesn't have if/elseif/else statements. So how do we make sure we use the right offset?

By using `or` statements, we can make branching statements based on the fact that if one statement in total evaluates to `false`, it will move on to the next one. As such, we can create an implicit if/elseif statement using the following:
```
rule Heuristic_ELF_with_One_Section {
    condition:
        uint32be(0) == 0x7f454c46 and
        (
            // 32-bit
            (
                uint8(4) == 1 and
                uint16(0x30) == 1
            )
            or
            // 64-bit
            (
                uint8(4) == 2 and
                uint16(0x3c) == 1
            )
        )
}
```
I.e., if we see it is 32-bit, we check offset `0x30`; if either of the statements in that block are false, the `or` statement will then check the second block, which will do a `64-bit` check (i.e. checking offset `0x3c`).

I'll talk in the next post about ways of simplifying this condition a bit.