---
layout: post
title: "100 Days of YARA - Day 87"
date: 2023-03-28 00:00:00 -0000
categories: yara
---

# AcidBox - SSP DLL Code - Signaturing Crypto Routine - Part 1
We've written some rules for strings and meta features of the AcidBox SSP DLL. So let's move on to code. Unfortunately, I think this starts to create a barrier to entry from a detection perspective, as a little bit of reverse engineering knowledge is usually required to make a start on this. However, I hope I can highlight some features that are worth looking at from a YARA perspective!

To analyse `003669761229d3e1db0f5a5b333ef62b3dffcc8e27c821ce9018362e0a2df7e9` I'm using [Ghidra](https://github.com/NationalSecurityAgency/ghidra), which is free and open source.

So where should we start looking? Something I usually look for is custom cryptography routines, which can sometimes be useful for clustering samples together. `FUN_180007fc8` appears to be loading a PE resource (which matches with what is described in the [AcidBox blog](https://unit42.paloaltonetworks.com/acidbox-rare-malware/)). So by looking around, I can see that `FUN_180013a14` appears to be some kind of cryptography routine (likely RSA, but we don't necessarily need to know that for now) based on the fact that it has a for loop which contains an XOR.

![](/assets/2023-03-28_crypto_routine.PNG)

Looking at the highlighted disassembly/decompiler view, I can see that there are some "nice" instructions to work with; that is, there are no fixed offsets (e.g. referencing string positions that may change throughout the samples), and the combination of registers/instructions used looks pretty unique! As such, I can use Ghidra's `Copy Special...` option to copy out the `Byte String` of this code, and put it straight into a YARA rule.
```
rule AcidBox_SSP_DLL_Loader_Crypto_Routine_A {
    meta:
        description = "Detects AcidBox SSP DLL loaders, based on a unique cryptography routine"
        author = "BitsOfBinary"
        reference = "https://unit42.paloaltonetworks.com/acidbox-rare-malware/"
        hash = "003669761229d3e1db0f5a5b333ef62b3dffcc8e27c821ce9018362e0a2df7e9"
        
    strings:
        // 180013a71 0f  b6  04  32   MOVZX      EAX ,byte ptr [param_2  + RSI *0x1 ]
        // 180013a75 33  c8           XOR        param_1 ,EAX
        // 180013a77 88  0c  3a       MOV        byte ptr [param_2  + RDI *0x1 ],param_1
        // 180013a7a 41  ff  c0       INC        param_3
        // 180013a7d 44  89  44       MOV        dword ptr [RSP  + local_14 ],param_3
        //           24  04
        $ = {0f b6 04 32 33 c8 88 0c 3a 41 ff c0 44 89 44 24 04}
        
    condition:
        any of them
}
```