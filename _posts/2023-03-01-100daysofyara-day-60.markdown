---
layout: post
title: "100 Days of YARA - Day 60"
date: 2022-03-01 00:00:00 -0000
categories: yara
---

# File classification: PE files - Alternative approaches
It can be worth building in some redundancy into the ways you can classify files, in case obfuscation is applied to throw off standard signatures!

For the PE file format, an alternative way of signaturing this file may be to look at the MS-DOS stub: [https://learn.microsoft.com/en-us/windows/win32/debug/pe-format#ms-dos-stub-image-only](https://learn.microsoft.com/en-us/windows/win32/debug/pe-format#ms-dos-stub-image-only)

As described in the documentation:
> The MS-DOS stub is a valid application that runs under MS-DOS. It is placed at the front of the EXE image. The linker places a default stub here, which prints out the message "This program cannot be run in DOS mode" when the image is run in MS-DOS. The user can specify a different stub by using the /STUB linker option.

So we have two options. Either looking for the string `This program cannot be run in DOS mode`, or having a signature for the DOS stub itself. Given we're focusing on offsets at the moment, we'll do the latter.

Take for example `calc.exe`, the DOS stub begins at offset `0x40`, and is made up of the following bytes:
```
0E 1F BA 0E 00 B4 09 CD 21 B8 01 4C CD 21
```

The following blog post has an annotated screenshot of this code: [https://osandamalith.com/2020/07/19/exploring-the-ms-dos-stub/](https://osandamalith.com/2020/07/19/exploring-the-ms-dos-stub/)

So if we take the first few bytes of this stub, we could create the following rule:
```
rule IsPE {
    condition:
        uint32be(0x40) == 0x0E1FBA0E
}
```

So this is a potential alternative approach to finding PE files! What I would caution though is that the documentation above states that `The user can specify a different stub by using the /STUB linker option`, meaning that these bytes won't be as consistent. However, it may be interesting to look for alternative DOS stubs in PE files to see what is being used!