---
layout: post
title: "100 Days of YARA - Day 61"
date: 2023-03-02 00:00:00 -0000
categories: yara
---

# File classification: PE files - Sufficient checks
Most of the time if I'm writing a rule to classify PE files, I will abbreviate my condition to:
```
rule IsPE
{
    condition:
        uint16(0) == 0x5A4D
}
```

That is, I'm only checking for the `MZ` string. Is that enough? Is that sufficient to determine whether a file is a valid PE?

The short answer is no. By doing this, I'm avoiding checking the `PE\x00\x00` string. Neither am I checking for the `This program cannot be run in DOS mode` string which would be [printed out by the DOS stub](https://learn.microsoft.com/en-us/windows/win32/debug/pe-format#ms-dos-stub-image-only). I'm certainly not checking for whether the rest of the PE header is valid, or if the sections fit the specific provided, etc.

However, the check `uint16(0) == 0x5A4D` is "good enough". If a file on a machine starts with the characters `MZ`, chances are it is a PE file (there's always the PE module you can use if you want a more thorough check). However, if it isn't a valid PE, this is potentially already a good chance to start writing rules for anomalous files...

Consider the following for instance:
```
rule `Heuristic_MZ_Bytes_At_File_Start_Without_DOS_String {
    strings:
        $dos_string = "This program cannot be run in DOS mode"
    
    condition:
        uint16(0) == 0x5A4D and not $dos_string
```

As described, this rule will fire if there is no DOS string in a file that starts with `MZ`. While I can imagine this will yield a lot of FPs, it is one of those rules that could be a useful threat hunting edge case, in case threat actors are trying to hide data in weird ways!