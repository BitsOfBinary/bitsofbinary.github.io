---
layout: post
title: "100 Days of YARA - Day 86"
date: 2023-03-27 00:00:00 -0000
categories: yara
---

# AcidBox - SSP DLL Strings - PE Meta Features Part 5
I think it's worth pointing out successful rule attempts, as well as failures. I wanted to see if I could write a rule based on the following information from the [Palo Alto blog](https://unit42.paloaltonetworks.com/acidbox-rare-malware/):
> All of the AcidBox samples contain gaps between the single exported function entries...
> 
> Every AcidBox sample has a NumberOfFunctions value in the export directory that is bigger than the NumberOfNames value. This isnâ€™t something unusual, as not every exported function has to have a name too. Unnamed functions can be also called by their ordinal values. What is uncommon, however, is that the function entries which are unnamed are also zeroed out, thus not used.

By looking at the information from the PE module, the following export details are parsed out:
```
export_details
	[0]
		offset = 28244
		name = "InitSecurityInterfaceA"
		forward_name = YR_UNDEFINED
		ordinal = 1
	[1]
		offset = 0
		name = YR_UNDEFINED
		forward_name = YR_UNDEFINED
		ordinal = 2
	[2]
		offset = 0
		name = YR_UNDEFINED
		forward_name = YR_UNDEFINED
		ordinal = 3
	[3]
		offset = 0
		name = YR_UNDEFINED
		forward_name = YR_UNDEFINED
		ordinal = 4
	[4]
		offset = 27964
		name = "InitPhysicalInterfaceA"
		forward_name = YR_UNDEFINED
		ordinal = 5
	[5]
		offset = 0
		name = YR_UNDEFINED
		forward_name = YR_UNDEFINED
		ordinal = 6
	[6]
		offset = 28408
		name = "UpdateSecurityContext"
		forward_name = YR_UNDEFINED
		ordinal = 7
	[7]
		offset = 0
		name = YR_UNDEFINED
		forward_name = YR_UNDEFINED
		ordinal = 8
	[8]
		offset = 28168
		name = "SpLsaModeInitialize"
		forward_name = YR_UNDEFINED
		ordinal = 9
```

In many cases, the export `name` member is `YR_UNDEFINED`, which we can check using the `defined` keyword. These exports also seem to have their export set to `0`; I'm not sure if this is a default for the pe module or not. As such I wrote the following rule looking for DLL with multiple, low ordinal exports with no name:
```
import "pe"

rule Heuristic_Multiple_Undefined_Low_Ordinal_Exported_Functions {
    meta:
        description = "Detects DLLs with at least 2 different exported functions that are undefined, and which have low ordinals"
        note = "This returns a lot of results, do not use for threat hunting without extra heuristics"
        
    condition:
        for 2 export in pe.export_details : (
            export.offset == 0 and
            not defined export.name and
            export.ordinal <= 10
        )
}
```

Unfortunately, as Palo Alto points out, this is not uncommon! Turns out a lot of DLLs have empty exports, meaning you can't rely on this alone. Still, the rule might be useful with some extra heuristics/context applied, but I wouldn't recommend using it in general.