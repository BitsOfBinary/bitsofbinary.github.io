---
layout: post
title: "100 Days of YARA - Day 73"
date: 2023-03-14 00:00:00 -0000
categories: yara
---

# File classification: OneNote Case Study - Embedded Files - Part 2
So how can we add heuristics to the rule in the previous post? From what I've seen, for it to be possible to execute files embedded within OneNote files, they need a valid file extension.

In the [OneNote file specification](https://interoperability.blob.core.windows.net/files/MS-ONE/%5bMS-ONE%5d.pdf), the following `PropertyID` is listed:
```
EmbeddedFileName    0x1C001D9C
```

In particular, a `jcidEmbeddedFileNode` structure in a OneNote file may contain both a `EmbeddedFileContainer` and `EmbeddedFileName` structure. So a further heuristic could be to look for embedded files which we know have filenames listed:
```
rule Heuristic_OneNote_Notebook_with_Embedded_File_with_Filename {
    meta:
        reference = "https://interoperability.blob.core.windows.net/files/MS-ONE/%5bMS-ONE%5d.pdf"

    strings:
        $embedded_file_container = {9B 1D 00 20}
        $embedded_file_name = {9C 1D 00 1C}

    condition:
        uint32be(0) == 0xE4525C7B and 
        $embedded_file_container and
        for any i in (1 .. #embedded_file_container) : (
            $embedded_file_name in (@embedded_file_container[i] .. @embedded_file_container[i] + 0x30)
        )
}
```

This rule extends the previous post's rule by adding a for loop which iterates over each instance of `$embedded_file_container`, and looks to see if a `$embedded_file_name` string lies within the first `0x30` bytes of an occurance of any of them.