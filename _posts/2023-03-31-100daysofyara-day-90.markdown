---
layout: post
title: "100 Days of YARA - Day 90"
date: 2023-03-31 00:00:00 -0000
categories: yara
---

# AcidBox - SSP DLL Code - Error Return Codes - Part 1
Something I noticed when looking through the AcidBox code was that a lot of functions would return 4-byte codes when it appeared that functions had errors. For example, in the screenshot below, you can see highlighted one of these error codes which will be returned if the call to `OpenMutexA` fails:
![](/assets/2023-03-31_acidbox_ssp_ghidra_unique_return_codes.PNG)

This got me thinking that these values may be of interest from a detection perspective. But the first challenge is, how do we collect them all?

I could go through each function individually and copy them out, but that would take a while. So intead, I wrote the following Ghidra script:
```python
max_steps = 100000
counter = 0

ins = getFirstInstruction()
last_ins = getLastInstruction()

while counter < max_steps and ins != last_ins:
    mne_str = ins.getMnemonicString()
    
    if mne_str == "MOV":
        num_ops = ins.getNumOperands()
        
        if num_ops == 2:
            reg = ins.getDefaultOperandRepresentation(0)
            
            if reg == "EAX" or reg == "EBX":
                val = ins.getDefaultOperandRepresentation(1)
                
                if val.startswith("0x") and len(val) == 10:
                    print(val)
    
    ins = getInstructionAfter(ins)
    counter += 1
```

It's pretty hacky, but what it will do is iterate through the sample, find all instances of `MOV` instructions, and if a 4-byte value is being moved into `EAX` or `EBX` (the ones I saw commonly being used), it will print out those instructions.

The returned results cannot be used immediately, as there are some values returned that will cause lots of false positive (e.g. `0xfffffffe`), and they are all the wrong endianess to use in YARA strings. As such, I put together a CyberChef script where I have removed some results, swapped the endianess, and put them in a nice format to use in YARA, which you can find [here](https://gchq.github.io/CyberChef/#recipe=Unique('Line%20feed',false)Fork('%5C%5Cn','%5C%5Cn',false)Find_/_Replace(%7B'option':'Simple%20string','string':'0x'%7D,'',true,false,true,false)Swap_endianness('Hex',4,true)&input=MHhhMDAwMDQwNgoweGEwMDAwNDAxCjB4YTAwMDA0MDIKMHhhMDAwMGMwYwoweGEwMDAwYzAyCjB4YTAwMDA3MDEKMHhhMDAwMDgwNwoweGEwMDAwNzAyCjB4YTAwMDA2MDQKMHhhMDAwMDYwOAoweGEwMDAwNjAyCjB4YTAwMDA4MGMKMHhhMDAwMDgwNgoweGEwMDAwODA0CjB4YTAwMzEwMDcKMHhhMDAzMTAwOQoweGEwMDMxMDExCjB4YTAwMzEwMDkKMHhhMDAzMTAwOQoweGEwMDMxMDAyCjB4YTAwODA0MDQKMHhhMDA4MDQwNwoweGEwMDAwMzAyCjB4YTAwODA0MDIKMHhhMDA4MDEwNAoweGEwMDgwMTA2CjB4YTAwODAxMGUKMHhhMDA4MDEwZQoweGEwMDgwMjAxCjB4YTAwODAyMDIKMHhhMDA4MDIwNAoweGEwMDgwMjA2CjB4YTAwODAyMDEKMHhhMDA4MDIwMgoweGMwMDAwMDAxCjB4YTAwODBhMDIKMHhhMDAzMDYwMgoweGEwMDMwNjA0CjB4YTAwMzA2MTAKMHhhMDAzMDYwZQoweDgwMDIwODAyCjB4ODAwMjA4MDYKMHg4MDAyMDgwMQoweDgwMDIwODA0CjB4ODAwMjA4MDcKMHg4MDAyMDgwNwoweDgwMDIwODA0CjB4ODAwMjA4MDIKMHg4MDA3ODA3MQoweDgwMDMwMTA2CjB4ODAwMzAxMDYKMHg4MDAzMDEwMgoweDgwMDMwNjAyCjB4ODAwMzA2MDEKMHg4MDAzMDcwMgoweDgwMDMwNzA2CjB4ODAwNDA2MDcKMHg4MDA0MDYwNAoweDgwMDQwNjA1CjB4ODAwNDA2MDIKMHg4MDA0MTYwNwoweDgwMDQxNjA0CjB4ODAwNDE2MDYKMHg4MDA0MTYwMgoweDgwMDQyODAyCjB4ODAwNDI4MDcKMHg4MDA0MGIwNgoweDgwMDQwYjAyCjB4ODAwNDBjMDIKMHg4MDA0MGQwMgoweDgwMDQwZDA2CjB4ODAwNDFjMDIKMHg4MDA0MWMwNAoweDgwMDQxYzA3CjB4ODAwNDFjMDYKMHg4MDA0MWMwYwoweDgwMDQxYzAyCjB4ODAwNDFkMDYKMHg4MDA0MjIwOQoweDgwMDQwODA5CjB4ODAwNDA5MDkKMHg4MDA0MDcwOQoweDgwMDQyMjAyCjB4ODAwNDAxMGMKMHg4MDA0MDEwMgoweDgwMDQxMDAyCjB4ODAwNDExMDIKMHg4MDA0MTEwNwoweDgwMDQxMTBhCjB4ODAwNDEyMDIKMHg4MDA0MTIwYQoweDgwMDQxMjA3CjB4ODAwNDBmMDEKMHg4MDA0MGYwNwoweDgwMDQwZjAyCjB4ODAwNDBmMGEKMHg4MDA0MGYwYgoweDgwMDQwZjA3CjB4ODAwNDBmMDIKMHg4MDA0MGYwMQoweDgwMDQwZjAyCjB4ODAwNDAyMDIKMHg4MDA0MDQwNwoweDgwMDQwNDBjCjB4ODAwNDA0MDIKMHg4MDA0MTQwMgoweDgwMDQxNTAyCjB4ODAwNDE0MGEKMHg4MDA0MTUwNwoweDgwMDQxNTBjCjB4ODAwNDI1MDkKMHg4MDA0MjUwMgoweDgwMDQyNjAyCjB4ODAwNDI2MDIKMHg4MDA0MjcwNgoweDgwMDQyNzA3CjB4ODAwNDI3MDcKMHg4MDA0MjcwOQoweDgwMDQyNzA3CjB4ODAwNDI3MGMKMHg4MDA0MjcwYQoweDgwMDQyNzA0CjB4ODAwNDI3MDIKMHg0ZWM0ZWM0ZgoweDgwMDQxMzA0CjB4ODAwNDEzMGMKMHg4MDA0MTMwNgoweDgwMDQxMzA2CjB4ODAwNDEzMDEKMHg4MDA0MTMwMgoweDgwMDQyMTBjCjB4ODAwNDIxMDYKMHg4MDA0MjEwNgoweDgwMDQyMTA1CjB4ODAwNDIxMDIKMHg4MDA0MTcwNgoweDgwMDQxNzA2CjB4ODAwNDE3MGMKMHg4MDA0MTcwMgoweDgwMDUwNTAyCjB4ODAwNTA1MDYKMHg4MDA1MDUwNgoweDgwMDUwNzA2CjB4ODAwNTA3MDQKMHg4MDA1MDcwMgoweDgwMDUwOTAyCjB4ODAwNTA5MDYKMHg4MDA3MGIwMQoweDgwMDcwYjA2CjB4ODAwNzBiMDIKMHg4MDA3MGMwNgoweDgwMDcwYzAyCjB4ODAwMTAzMDUKMHg4MDAxMDMwNQoweDgwMDEwMzAy).

I'll use the output in the next post to start writing rules with.